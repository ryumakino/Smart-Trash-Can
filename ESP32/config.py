# ----------- HARDWARE PINS -----------
PIR_SENSOR_PIN = 34
SERVO_PIN = 18
LED_PIN = 2  # Built-in LED

# ----------- WASTE TYPES AND SERVO POSITIONS -----------
WASTE_TYPES = ["PLASTIC", "PAPER", "GLASS", "METAL", "TRASH", "CARDBOARD"]
SERVO_POSITIONS = [0, 30, 60, 90, 120, 150]
NEUTRAL_POSITION = 90  # Servo neutral position

# ----------- NETWORK SETTINGS - STATIC IP FOR ESP32 -----------
ESP_IP = "192.168.1.100"  # Fixed IP of ESP32
ESP_SUBNET = "255.255.255.0"
ESP_GATEWAY = "192.168.1.1"
PC_IP_ADDRESS = "192.168.1.50"  # PC IP
UDP_PORT = 12345  # Communication port

# ----------- WI-FI CREDENTIALS -----------
WIFI_SSID = "YOUR_NETWORK_NAME"
WIFI_PASSWORD = "YOUR_PASSWORD"

# ----------- TIMEOUTS AND DELAYS (ms) -----------
MOVEMENT_TIMEOUT_MS = 10000       # 10 seconds
SERVO_MOVEMENT_DELAY = 500        # 500ms
WASTE_PROCESSING_DELAY = 2000     # 2 seconds
SERIAL_READ_TIMEOUT = 100         # 100ms for serial check
STATUS_REPORT_INTERVAL = 30000    # 30 seconds
COMMUNICATION_TIMEOUT_MS = 5000   # 5 seconds for communication timeout
WIFI_CONNECTION_TIMEOUT_MS = 15000  # 15 seconds for Wi-Fi connection
DEBOUNCE_DELAY_MS = 200           # 200ms for button/sensor debouncing

# ----------- SYSTEM STATES -----------
NO_TYPE_SELECTED = -1
SYSTEM_READY = "READY"
SYSTEM_ERROR = "ERROR"
SYSTEM_BUSY = "BUSY"

# ----------- COMMUNICATION CHANNELS -----------
CHANNEL_SERIAL = "SERIAL"
CHANNEL_UDP = "UDP"
CHANNEL_NONE = "NONE"

# ----------- SYSTEM COMMANDS -----------
CMD_SET_TYPE = "SET_TYPE:"
CMD_TYPE = "TYPE:"
CMD_STATUS = "STATUS"
CMD_GET_STATUS = "GET_STATUS"
CMD_HELP = "HELP"
CMD_SHUTDOWN = "SHUTDOWN"
CMD_RESTART = "RESTART"
CMD_RESET = "RESET"
CMD_CANCEL = "CANCEL"
CMD_CALIBRATE = "CALIBRATE"

# ----------- SYSTEM MESSAGES -----------
MSG_MOVEMENT_DETECTED = "MOVEMENT_DETECTED"
MSG_TYPE_SELECTED = "TYPE_SELECTED"
MSG_TYPE_DEFINED = "TYPE_DEFINED"
MSG_DISPOSAL_STARTED = "DISPOSAL_STARTED"
MSG_DISPOSAL_COMPLETED = "DISPOSAL_COMPLETED"
MSG_DISPOSAL_CANCELLED = "DISPOSAL_CANCELLED"
MSG_ERROR = "ERROR"
MSG_STATUS = "STATUS"
MSG_HELP = "HELP"
MSG_SYSTEM_STARTED = "SYSTEM_STARTED"
MSG_SYSTEM_RESTARTING = "SYSTEM_RESTARTING"
MSG_SYSTEM_RESET = "SYSTEM_RESET"
MSG_SERVO_INITIALIZED = "SERVO_INITIALIZED"
MSG_SERVO_MOVING = "SERVO_MOVING"
MSG_SERVO_POSITIONED = "SERVO_POSITIONED"
MSG_WAITING_DISPOSAL = "WAITING_FOR_DISPOSAL"
MSG_TIMEOUT = "TIMEOUT"
MSG_WIFI_CONNECTED = "WIFI_CONNECTED"
MSG_WIFI_FAILED = "WIFI_FAILED"

# ----------- MESSAGE PREFIXES -----------
PREFIX_CANAL = "CHANNEL:"
PREFIX_TIPO = "TYPE:"
PREFIX_ANGULO = "ANGLE:"
PREFIX_NOME = "NAME:"
PREFIX_IP = "IP:"

# ----------- SERVO DUTY CYCLE VALUES -----------
SERVO_DUTY_MIN = 40
SERVO_DUTY_MAX = 155
SERVO_DUTY_RANGE = SERVO_DUTY_MAX - SERVO_DUTY_MIN
SERVO_FREQUENCY = 50

# ----------- BUFFER SIZES -----------
UDP_BUFFER_SIZE = 1024
SERIAL_BUFFER_SIZE = 128

# ----------- PROCESSING STATES -----------
PROCESSING_ACTIVE = True
PROCESSING_INACTIVE = False

# ----------- ERROR CODES -----------
ERROR_SERVO_FAILURE = 1
ERROR_SENSOR_FAILURE = 2
ERROR_COMMUNICATION_FAILURE = 3
ERROR_WIFI_FAILURE = 4
ERROR_INVALID_COMMAND = 5

# ----------- DEBUG SETTINGS -----------
DEBUG_MODE = True
LOG_LEVEL = "INFO"  # DEBUG, INFO, WARNING, ERROR

def log_message(level: str, message: str) -> None:
    """
    Log message with appropriate level.
    MicroPython-friendly logging.
    """
    if DEBUG_MODE:
        levels = ["DEBUG", "INFO", "WARNING", "ERROR"]
        if level in levels and levels.index(level) >= levels.index(LOG_LEVEL):
            print(f"[{level}] {message}")